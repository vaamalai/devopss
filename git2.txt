Overview of Git :
The basic Git workflow goes something like this:

1> You modify files in your working directory.
2> You stage the files, adding snapshots of them to your staging area.
3> You do a commit, which takes the files as they are in the staging area and stores that snapshot permanently to your git directory 
 
If a particular version of a file is in the Git directory, it’s considered committed.
 If it’s modified but has been added to the staging area, it is staged. 
And if it was changed since it was checked out but has not been staged, it is modified. 


Git Branching strategy :

Feature branching – A feature branch model keeps all of the changes for a particular feature inside of a branch. When the feature is fully tested and validated by automated tests, the branch is then merged into master.

Task branching – In this model, each task is implemented on its own branch with the task key included in the branch name. It is easy to see which code implements which task, just look for the task key in the branch name.

Release branching – Once the develop branch has acquired enough features for a release, you can clone that branch to form a Release branch. Creating this branch starts the next release cycle, so no new features can be added after this point, only bug fixes, documentation generation, and other release-oriented tasks should go in this branch. Once it is ready to ship, the release gets merged into master and tagged with a version number. In addition, it should be merged back into the develop branch, which may have progressed since the release was initiated.

commands :

git branch	List branches (the asterisk denotes the current branch)
git branch -a	List all branches (local and remote)
git branch [branch name]	Create a new branch
git branch -d [branch name]	Delete a branch
git push origin --delete [branch name]	Delete a remote branch
git checkout -b [branch name]	Create a new branch and switch to it
git checkout -b [branch name] origin/[branch name]	Clone a remote branch and switch to it
git branch -m [old branch name] [new branch name]	Rename a local branch
git checkout [branch name]	Switch to a branch
git checkout -	Switch to the branch last checked out
git merge --- to merge a branch 
	

Tags :
Tags are ref's that point to specific points in Git history. Tagging is generally used to capture a point in history that is used for a marked version release (i.e. v1.0.1). 

commands :

git tag v1.0 ----------- to create a tag 
git tag -----------------to view tags
git tag -a v1.0.0 -m "Releasing version v1.0.0" ------------- to create a tag with committed message
git show <tag_identifier>-------This command presents you with tag details and information from the commit that was tagged.
git tag -d v1.0 ---------- to deleta a tag v1.0 locally 	
git push origin v1.0   --------- to publish it to remote repository 
git push origin --delete v1.0 ---- to delete  in git hub


